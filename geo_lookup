#!/bin/bash
#
# declare the DNSSRV list array

declare DNSSRV

# Check whether the user had supplied -h or --help.  If yes, then display usage example.
#
	if [[ $1 == "--help" || $1 == "-h" ]]
		then
			echo -e "\nThis script will attempt to resolve NAPTR for Fuze's public GeoDNS domain by using a Public DNS Server in the chosen country.  Enter a 2 letter country code (e.g., gb, de, au, etc.).\nThe command issued is:\ndig @SERVER NAPTR edge.uc.fuze.site +short\n\nUsage: $0 <2 Letter Country Abbreviation>."
			echo -e "\nThis script references https://public-dns.info/#countries and the lists of DNS servers found on pages like https://public-dns.info/nameserver/gb.txt for example.  The script uses the country code provided to find the first IP address from such a list on the public-dns.info website." 
			exit 1
	fi
#
# If there were no arguments provided, and they didn't ask for help, prompt for the input and continue.
#
((SRVTOT=0))
	if [ $# -lt 1 ]; then
		while [[ ! $CC =~ ^[A-Za-z]{2}$ || ($SRVTOT = 0) ]]; do
			echo -e -n "Enter a 2 Letter Country Abbreviation (e.g., gb, de, au):  "
			read -r CC
			lcc=`echo $CC | tr '[:upper:]' '[:lower:]'`
			curl -s https://public-dns.info/nameserver/$lcc.txt > ./dnssrv_list.txt
			IFS=$'\n' read -d '' -r -a DNSSRV < ./dnssrv_list.txt
			rm ./dnssrv_list.txt
			((SRVTOT=${#DNSSRV[@]}))
		done
	else
		CC=`echo $1`
                lcc=`echo $CC | tr '[:upper:]' '[:lower:]'`
                curl -s https://public-dns.info/nameserver/$lcc.txt > ./dnssrv_list.txt
                IFS=$'\n' read -d '' -r -a DNSSRV < ./dnssrv_list.txt
                rm ./dnssrv_list.txt
                ((SRVTOT=${#DNSSRV[@]}))
                while [[ ! $CC =~ ^[A-Za-z]{2}$ || ($SRVTOT = 0) ]]; do
                        echo -e -n "Enter a 2 Letter Country Abbreviation (e.g., gb, de, au):  "
                        read -r CC
                        lcc=`echo $CC | tr '[:upper:]' '[:lower:]'`
                        curl -s https://public-dns.info/nameserver/$lcc.txt > ./dnssrv_list.txt
                        IFS=$'\n' read -d '' -r -a DNSSRV < ./dnssrv_list.txt
                        rm ./dnssrv_list.txt
                        ((SRVTOT=${#DNSSRV[@]}))
		done
	fi
#
# How many servers are in the array?
echo -e "According to https://public-dns.info there are $SRVTOT DNS servers in $lcc at this time!\n"

if [ $SRVTOT -lt 20 ] ; then
	if [ $SRVTOT -eq 1 ] ; then
		echo -e "*** Now Testing ${DNSSRV[0]}, <Ctrl+c> to skip ***"
		echo
       		echo -e "dig @${DNSSRV[0]} NAPTR edge.uc.fuze.site +short | sort\n"
       		dig @${DNSSRV[0]} NAPTR edge.uc.fuze.site +short | sort
		exit 
	fi
#
# Found this method to print the array nicely into columns.  The "tab stop" in the printf notation helps.
	echo "Here's the whole list:"
	for value in "${DNSSRV[@]}"; do 
    		printf "%-8s\n" "${value}"
	done | column
else
	echo "Printing the first 20 from the list, but there are $SRVTOT DNS servers in $lcc:"
	for k in {0..19}; do
    		printf "%-8s\n" "${DNSSRV[$k]}"
	done | column
fi

echo 


# Ask how many to poll?
# set a temporary variable "snum" to be larger than the number of items in the DNSSRV array count SRVTOT
#
((snum=$SRVTOT+1))

#
# Now the while-do loop should continue until we get a value between 1 and the number of servers, and nothing else.
#
while [ $snum -gt $SRVTOT ]; do
	echo -e -n "How many of the $SRVTOT servers in $lcc should be tested (i.e., a number from [1-$SRVTOT], 0 to exit)?  " 
	read -r newnum
	if [ -z $newnum ] ; then 
		((snum=$SRVTOT+1))
	elif (( $newnum == 0 )) ; then
		exit 
	elif (( $newnum >= 1 && $newnum <= $SRVTOT )) ; then
                ((snum=$newnum))
	else 
		((snum=$SRVTOT+1))
	fi
done
#
# Since the array is "0 based" subract 1 from snum, and then make sure all the loops start with "0" too
#
((snum=$snum-1))
echo "Here is the list of DNS Servers to test:"
for i in $(seq 0 $snum)
	do
		((m=$i+1))
		echo -e "\t$m.  ${DNSSRV[$i]}"
	done
#
# Lookup the Fuze Domain from the DNS Server in that Country

echo
for j in $(seq 0 $snum)
	do
		echo -e "*** Now Testing ${DNSSRV[$j]}, <Ctrl+c> to skip ***"
		echo
       		echo -e "dig @${DNSSRV[$j]} NAPTR edge.uc.fuze.site +short | sort\n"
       		dig @${DNSSRV[$j]} NAPTR edge.uc.fuze.site +short | sort
		echo 
	done
